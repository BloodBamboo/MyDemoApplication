apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.example.admin.myapplication"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        manifestPlaceholders = [ LAUNCHER:"main" ]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        ndk{
//            moduleName "MyTestLib" //生成的.so的名字
//            abiFilters "armeabi-v7a"//,"armeabi-v7a","x86"
//        }
        externalNativeBuild {
            ndk{
                moduleName "MyTestLib" //生成的.so的名字
                abiFilters "armeabi-v7a"//,"armeabi-v7a","x86"
            }
            cmake {
//                cppFlags "-frtti -fexceptions"
                //此处可以设置编译时的一些配置参数，具体配置哪些暂时还不懂，ffmpeg -lz 编译就不会报引用找不到
                //cFlags -DSTDC_HEADERS cppFlags -frtti -fexceptions lame库编译参数，具体意思不知，网上查询，同时按资料修改了lame3个源文件，到底是哪个方式解决问题不清楚
//                cFlags "-DSTDC_HEADERS"
                cppFlags "-std=c++11 -lz"
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("../123456.jks")
            storePassword "123456"
            keyAlias "123456"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
            signingConfig signingConfigs.release
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        tt.initWith(release)
        tt {
            applicationIdSuffix ".tt"
            debuggable true
            jniDebuggable true
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
            version "3.10.2"
        }
    }
    flavorDimensions "channel"
    productFlavors {
        //默认版本,不设置 applicationId ,继承 defaultConfig 中的配置
        flavors_default {
            dimension  "channel"
        }
        baidu {
            dimension  "channel"
            applicationId "cn.com.baidu"
            manifestPlaceholders = [ LAUNCHER:"baidu" ]
        }
        sina {
            dimension  "channel"
            applicationId "cn.com.sina"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
        }
//        dev {
//            java.srcDirs = ['src/us/java/']
//        }
        baidu {
//            jniLibs.srcDirs = ['libs-zh']
            manifest.srcFile 'src/baidu/AndroidManifest.xml'
            java.srcDirs = ['src/baidu/java/']
            res.srcDirs = ['src/baidu/res']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
}

//variantFilter { variant ->
////        def buildType = variant.buildType*.name
//    def names = variant.flavors*.name
//    // To check for a certain build type, use variant.buildType.name == "<buildType>"
////        if (buildType.contains("debug")) {
////            setIgnore(true)
////        }
//
//    //过滤多余构建版本
//    if (names.contains("flavors_default")) {
//        setIgnore(false)
//    } else {
//        setIgnore(true)
//    }
//}

//aop编译代码
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
final def log = project.logger
final def variants = project.android.applicationVariants
variants.all { variant ->
    //跳过不是debuggable的情况
//    if (!variant.buildType.isDebuggable()) {
//        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
//        return;
//    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",//java jdk版本是8
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', "*.aar"], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.7.19'

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:palette-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    // butterknife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.zhy:percent-support-extends:1.1.1'
    implementation 'com.facebook.fresco:fresco:0.12.0'
    implementation 'me.dm7.barcodescanner:zxing:1.9.3'
    implementation 'com.zhy:percent-support-extends:1.1.1'
    implementation('com.github.garretyoder:app-theme-engine:1.5@aar') {
        transitive = true
    }
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'
    implementation 'com.github.bumptech.glide:glide:4.0.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.0.0'
    implementation 'com.lovedise:permissiongen:0.0.6'
    implementation 'com.alibaba:fastjson:1.1.68.android'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    implementation 'org.jetbrains:annotations:15.0'
}
